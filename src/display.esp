void drawColon(uint8_t pos, bool disp)
{
  if (disp)
  {
    u8g2.setDrawColor(1);
    u8g2.drawBox(61, pos, 4, 4);
    u8g2.drawBox(61, pos + 15, 4, 4);
  }
  else
  {
    u8g2.setDrawColor(0);
    u8g2.drawBox(61, pos, 4, 20);
    u8g2.setDrawColor(1);
  }
  u8g2.updateDisplay();
}

void drawicon(uint8_t line, uint8_t icon)
{
  u8g2.setDrawColor(0);
  u8g2.drawBox(0, CELLHGT * line, 2 * CELLWID, CELLHGT);
  u8g2.setDrawColor(1);
  if (icon == 0) // STOP
  {
    u8g2.drawBox(CELLWID / 4, line * CELLHGT + CELLHGT / 4, 10 * CELLWID / 8, 5 * CELLHGT / 8);
  }
  else if (icon == 1) // PLAY
  {
    u8g2.drawTriangle(CELLWID / 4, line * CELLHGT + CELLHGT / 4, CELLWID / 4, line * CELLHGT + 7 * CELLHGT / 8, 3 * CELLWID / 2, line * CELLHGT + 9 * CELLHGT / 16);
  }
  else if (icon == 2) // PAUSE
  {
    u8g2.drawBox(CELLWID / 4, line * CELLHGT + CELLHGT / 4, 3 * CELLWID / 8, 5 * CELLHGT / 8);
    u8g2.drawBox(9 * CELLWID / 8, line * CELLHGT + CELLHGT / 4, 3 * CELLWID / 8, 5 * CELLHGT / 8);
  }
  else if (icon == 3) // FF
  {
    u8g2.drawTriangle(0, line * CELLHGT + CELLHGT / 4, 0, line * CELLHGT + 7 * CELLHGT / 8, CELLWID, line * CELLHGT + 9 * CELLHGT / 16);
    u8g2.drawTriangle(3 * CELLWID / 4, line * CELLHGT + CELLHGT / 4, 3 * CELLWID / 4, line * CELLHGT + 7 * CELLHGT / 8, 7 * CELLWID / 4, line * CELLHGT + 9 * CELLHGT / 16);
  }
  else if (icon == 4) // FR
  {
    u8g2.drawTriangle(CELLWID, line * CELLHGT + CELLHGT / 4, CELLWID, line * CELLHGT + 7 * CELLHGT / 8, 0, line * CELLHGT + 9 * CELLHGT / 16);
    u8g2.drawTriangle(7 * CELLWID / 4, line * CELLHGT + CELLHGT / 4, 7 * CELLWID / 4, line * CELLHGT + 7 * CELLHGT / 8, 3 * CELLWID / 4, line * CELLHGT + 9 * CELLHGT / 16);
  }
}

void progressbar(uint8_t line, uint8_t col, uint8_t pix)
{
  uint8_t clrpix = WID;
  if (col == 1)
  {
    clrpix = WID - 2 * CELLWID;
  }
  u8g2.setDrawColor(0);
  u8g2.drawBox(CELLWID * col, CELLHGT * line, clrpix, CELLHGT); //(x,y,w,h)
  u8g2.setDrawColor(1);
  u8g2.drawBox(CELLWID * col, CELLHGT * line + CELLHGT / 4, pix, 5 * CELLHGT / 8);
}

void clearLine(uint8_t line, uint8_t setnone = 0)
{
  if (rows[line].type != 0)
  {
    u8g2.setDrawColor(0);
    u8g2.drawBox(0, CELLHGT * line, WID, CELLHGT);
    u8g2.setDrawColor(1);
    if (setnone == 1)
    {
      rows[line].type = 0;
    }
  }
}

void getRowMap(uint8_t row)
{
  uint8_t k = 0;
  uint8_t val;
  uint8_t skip = 0;

  char *p = rows[row].input;
  for (uint8_t i = 0; i < strlen(rows[row].input); i++)
  {
    if (skip > 0)
    {
      skip--;
    }
    else
    {
      rows[row].rowmap[k] = i;
      k++;
      val = (uint8_t)*p;
      if ((val & 0b10000000) == 0) // One-byte utf-8 char
      {
        p++;
        continue;
      }
      else if ((val & 0b11100000) == 0b11000000) // Two-bytes utf-8 char
      {
        skip = 1;
      }
      else if ((val & 0b11110000) == 0b11100000) // Three-bytes utf-8 char
      {
        skip = 2;
      }
      else if ((val & 0b11110000) == 0b11110000) // Four-bytes utf-8 char
      {
        skip = 3;
      }
    }
    p++;
  }
  rows[row].rowmap[k] = 255;
  rows[row].rowlen = k;
}

void scrollUTF8(uint8_t row)
{
  uint8_t k = 0;
  uint8_t pos = rows[row].lastpos;
  int chars;
  uint8_t first;
  uint8_t end;
  int spaces;
  //if (pos <= config.scrollgap)
  if (pos < config.scrollgap)
  {
    chars = config.scrollgap - pos;
    memcpy(rows[row].work, gap, chars);
    k += chars;
  }
  first = (pos < config.scrollgap) ? 0 : pos - config.scrollgap;
  end = ((first + ROW_LEN - k) < rows[row].rowlen) ? first + ROW_LEN - k : rows[row].rowlen;
  end = (end < rows[row].rowlen) ? rows[row].rowmap[end] : strlen(rows[row].input);
  chars = end - first;
  memcpy(rows[row].work + k, (char *)(rows[row].input + rows[row].rowmap[first]), chars);
  k += chars;
  spaces = pos + ROW_LEN - config.scrollgap - rows[row].rowlen;
  if (spaces > 0)
  {
    chars = min((uint8_t)spaces, config.scrollgap);
    memcpy(rows[row].work + k, gap, chars);
    k += chars;
    chars = spaces - config.scrollgap;
    if (chars > 0)
    {
      memcpy(rows[row].work + k, (char *)(rows[row].input), chars);
      k += chars;
    }
  }
  rows[row].work[k] = '\0';
  rows[row].lastpos++;
  if (rows[row].lastpos == rows[row].rowlen + config.scrollgap)
  {
    rows[row].lastpos = 0;
  }
}

void setmode(uint8_t md)
{
  if (md != mode)
  {
    mode = md;
    u8g2.clear();
    if (mode == 0)
    {
      u8g2.setFont(UNIFONT);
    }
    else if (mode == 1)
    {
      u8g2.setFont(BIGFONT);
      char array[] = ":";
      const char *colon = array;
      u8g2.drawStr(50, 50, colon);
    }
    else if (mode == 2)
    {
      u8g2.clear();
    }
    else if (mode == 3)
    {
      u8g2.setContrast(config.contrast3);
      oldmin = 61;
      oldhour = 24;
      oldday = 32;
    }
  }
}

void displaysetup(void)
{
  u8g2.begin();
  u8g2.enableUTF8Print();
  u8g2.setFont(UNIFONT);
  u8g2.setFontDirection(0);
  u8g2.clearBuffer();
  rows[0].lastpos = 0;
  rows[1].lastpos = 0;
  rows[2].lastpos = 0;
  rows[3].lastpos = 0;
  lastredrw = 0;
  tik = 0;
  colon = false;
  oldmin = 61;
  oldhour = 24;
  oldday = 32;
  step = 0;
}

void displayloop(void)
{
  uint32_t now_ = millis();
  if (mode == 0)
  {
    if (now_ - lastredrw > refr)
    {
      lastredrw = now_;
      for (uint8_t row = 0; row < ROWSNUM; row++)
      {
        if ((rows[row].lock == 0) && (rows[row].type == 2))
        {
          scrollUTF8(row);
          clearLine(row);
          u8g2.drawUTF8(0, CELLHGT * row + 14, rows[row].work);
        }
      }
      u8g2.updateDisplay();
    }
  }
  else if (mode == 3)
  {
    if ((now_ - tik) > 50)
    {
      tik = now_;
      step++;
      if (step == 10)
      {
        step = 0;
        colon = !colon;
        drawColon((config.calendar == 1) ? 38 : 27, colon);
        u8g2.updateDisplay();
      }
      nw = time(nullptr);
      tm *lt;
      lt = localtime(&nw);
      uint8_t Minute = lt->tm_min;
      if (Minute != oldmin)
      {
        step = 3;
        oldmin = Minute;
        char buffer[4];
        sprintf(buffer, "%02d", Minute);
        u8g2.setFont(BIGFONT);
        const char *val_ = buffer;
        uint8_t vpos = (config.calendar == 1) ? 63 : 52;
        u8g2.drawStr(72, vpos, val_);
        uint8_t Hour = lt->tm_hour;
        if (Hour != oldhour)
        {
          step = 4;
          oldhour = Hour;
          char buffer[4];
          sprintf(buffer, "%02d", Hour);
          const char *val_ = buffer;
          u8g2.drawStr(0, vpos, val_);
          if (config.calendar == 1)
          {
            uint8_t Day = lt->tm_mday;
            if (Day != oldday)
            {
              oldday = Day;
              uint8_t Mon = lt->tm_mon + 1;
              int Year = lt->tm_year + 1900;
              int Weekday = lt->tm_wday - 1;
              if (Weekday == -1)
                Weekday = 6;
              u8g2.setDrawColor(0);
              u8g2.drawBox(0, 0, WID, 18);
              u8g2.setDrawColor(1);
              u8g2.setFont(UNIFONT);
              char buffer[24];
              sprintf(buffer, "%s  %04d-%02d-%02d", config.wdays[Weekday], Year, Mon, Day);
              const char *date = buffer;
              u8g2.drawUTF8(0, 16, date);
            }
          }
        }
        u8g2.updateDisplay();
      }
    }
  }
}
