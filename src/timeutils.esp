int ICACHE_FLASH_ATTR getTZoffset(time_t tt)
{
  tm *LOC_TM; // pointer to a tm struct;
  LOC_TM = localtime(&tt);
  int minl = LOC_TM->tm_min;   //
  int hourl = LOC_TM->tm_hour; //
  int yearl = LOC_TM->tm_year; //
  int ydayl = LOC_TM->tm_yday; //

  char *pattern = (char *)"%d-%m-%Y %H:%M:%S";
  tm *gt;
  gt = gmtime(&tt);
  char bffr[30];
  strftime(bffr, 30, pattern, gt);
  struct tm GMTM = {0};
  strptime(bffr, pattern, &GMTM);
  int ming = GMTM.tm_min;                   //
  int hourg = GMTM.tm_hour;                 //
  int yearg = GMTM.tm_year;                 //
  int ydayg = GMTM.tm_yday;                 //
  if (yearg != yearl)
  {
    if (yearg + 1 == yearl && ydayl == 0)
    {
      ydayg = -1;
    }
    else if (yearl + 1 == yearg && ydayg == 0)
    {
      ydayl = -1;
    }
    else
    {
      return 0;
    }
  }
  return minl - ming + 60 * (hourl - hourg) + 1440 * (ydayl - ydayg);
}

time_t getUptimeSec()
{
  _uptimesec = _uptimesec + (millis() - _uptimesec);
  return _uptimesec / 1000;
}

struct deviceUptime
{
  long days;
  long hours;
  long mins;
  long secs;
};

deviceUptime ICACHE_FLASH_ATTR getDeviceUptime()
{
  unsigned long currentmillis = millis();
  deviceUptime uptime;
  uptime.secs = (long)((currentmillis / 1000) % 60);
  uptime.mins = (long)((currentmillis / 60000) % 60);
  uptime.hours = (long)((currentmillis / 3600000) % 24);
  uptime.days = (long)((currentmillis / 86400000) % 10);

  return uptime;
}

void ICACHE_FLASH_ATTR getDeviceUptimeString(char *uptimestr)
{
  deviceUptime uptime = getDeviceUptime();
  sprintf(uptimestr, "%ld days, %ld hours, %ld mins, %ld secs", uptime.days, uptime.hours, uptime.mins, uptime.secs);
}

void ICACHE_FLASH_ATTR setSystemTime(const char *tz, time_t epch)
{
  setTZ(tz);
  timeval tv = {epch, 0};
  settimeofday(&tv, nullptr);
}

void time_is_set_scheduled()
{
  if (!ntpflag)
  {
    ntpflag = true;
    setmode((config.clock == 1) ? 3 : 2);
  }
#ifdef DEBUG
  Serial.println(F("[ INFO ] NTP Time updated"));
#endif
}
